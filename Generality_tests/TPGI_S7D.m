% Apply proposed method to spatial 7-DOF CDM-PRJ
function [q,exitflag,t,k]=TPGI_S7D(Td,q0,para)
t_fabrik=tic;
exitflag=0;
max_time=50e-3;
k_max=1000;
eps_po=1e-6;
overrun_threshold=2;

qlim=para.qlim;
pt=Td(1:3,4);
et=Td(1:3,3);

a=para.a; d=para.d;
a4=a(4); a7=a(7); d3=d(3); d6=d(6); d10=d(10);
qslim=qlim;
qslim(4,:)=2*qslim(4,:);
qslim(6,:)=2*qslim(6,:);
q=q0;
q1=q(1); q2=q(2); q3=q(3);
q4=q(4); q6=q(5); q7=q(6);
overlimit_flag=zeros(3,k_max);
k=0;
t=999;
N=zeros(3,3);
l(1)=d3+a4/(2*cos(q4));
l(2)=a4/(2*cos(q4))+d6+a7/(2*cos(q7));
l(3)=a7/(2*cos(q7))+d10;
y3=[cos(q1).*cos(q2),cos(q2).*sin(q1),sin(q2)]';
z5=[cos(q1).*cos(q2).*cos(2.*q4)+(-1).*(cos(q3).*sin(q1)+cos(q1).* ...
    sin(q2).*sin(q3)).*sin(2.*q4),cos(q2).*cos(2.*q4).*sin(q1)+(cos( ...
    q1).*cos(q3)+(-1).*sin(q1).*sin(q2).*sin(q3)).*sin(2.*q4),cos(2.* ...
    q4).*sin(q2)+cos(q2).*sin(q3).*sin(2.*q4)]';
z8=[cos(q1).*(cos(2.*q7).*(cos(q2).*cos(2.*q4)+(-1).*sin(q2).*sin(q3) ...
    .*sin(2.*q4))+(-1).*(cos(q6).*(cos(2.*q4).*sin(q2).*sin(q3)+cos( ...
    q2).*sin(2.*q4))+cos(q3).*sin(q2).*sin(q6)).*sin(2.*q7))+(-1).* ...
    sin(q1).*(cos(q3).*cos(2.*q7).*sin(2.*q4)+(cos(q3).*cos(2.*q4).* ...
    cos(q6)+(-1).*sin(q3).*sin(q6)).*sin(2.*q7)),cos(2.*q7).*(cos(q1) ...
    .*cos(q3)+(-1).*sin(q1).*sin(q2).*sin(q3)).*sin(2.*q4)+(cos(2.*q4) ...
    .*cos(q6).*(cos(q1).*cos(q3)+(-1).*sin(q1).*sin(q2).*sin(q3))+(-1) ...
    .*(cos(q3).*sin(q1).*sin(q2)+cos(q1).*sin(q3)).*sin(q6)).*sin(2.* ...
    q7)+cos(q2).*sin(q1).*(cos(2.*q4).*cos(2.*q7)+(-1).*cos(q6).*sin( ...
    2.*q4).*sin(2.*q7)),cos(2.*q7).*(cos(2.*q4).*sin(q2)+cos(q2).*sin( ...
    q3).*sin(2.*q4))+((-1).*cos(q6).*sin(q2).*sin(2.*q4)+cos(q2).*( ...
    cos(2.*q4).*cos(q6).*sin(q3)+cos(q3).*sin(q6))).*sin(2.*q7)]';
e(:,1)=y3;
e(:,2)=z5;
e(:,3)=z8;
N(:,1)=e(:,1)*l(1);
for i=2:3
    N(:,i)=N(:,i-1)+e(:,i)*l(i);
end

while toc(t_fabrik)<max_time
    %% If converge
    dp=N(:,end)-pt;
    do=acos(dot(e(:,end),et));
    epo=[dp;do];
    t=toc(t_fabrik);
    if norm(epo)<eps_po && t<max_time
        x10=Td(1:3,1);
        x9=[(-1).*sin(q1).*sin(q3).*sin(2.*q6).*sin(q7).^2+cos(q1).*((-1).*( ...
            cos(2.*q4).*sin(q2).*sin(q3)+cos(q2).*sin(2.*q4)).*(cos(q6).^2.* ...
            cos(2.*q7)+sin(q6).^2)+cos(q6).*((-1).*cos(q2).*cos(2.*q4)+sin(q2) ...
            .*sin(q3).*sin(2.*q4)).*sin(2.*q7))+cos(q3).*(cos(q1).*sin(q2).* ...
            sin(2.*q6).*sin(q7).^2+sin(q1).*((-1).*cos(2.*q4).*(cos(q6).^2.* ...
            cos(2.*q7)+sin(q6).^2)+cos(q6).*sin(2.*q4).*sin(2.*q7))),sin(q1).* ...
            (cos(q6).^2.*cos(2.*q7).*(sin(q2).*sin(q3).*sin(q4).^2+(-1).*cos( ...
            q2).*sin(2.*q4))+(sin(q2).*sin(q3).*sin(q4).^2+(-1).*cos(q2).*sin( ...
            2.*q4)).*sin(q6).^2+(-1).*cos(q4).^2.*sin(q2).*sin(q3).*(cos(q6) ...
            .^2.*cos(2.*q7)+sin(q6).^2)+cos(q3).*sin(q2).*sin(2.*q6).*sin(q7) ...
            .^2+cos(q6).*((-1).*cos(q2).*cos(2.*q4)+sin(q2).*sin(q3).*sin(2.* ...
            q4)).*sin(2.*q7))+cos(q1).*(sin(q3).*sin(2.*q6).*sin(q7).^2+cos( ...
            q3).*(cos(2.*q4).*(cos(q6).^2.*cos(2.*q7)+sin(q6).^2)+(-1).*cos( ...
            q6).*sin(2.*q4).*sin(2.*q7))),(-1).*sin(q2).*(sin(2.*q4).*(cos(q6) ...
            .^2.*cos(2.*q7)+sin(q6).^2)+cos(2.*q4).*cos(q6).*sin(2.*q7))+cos( ...
            q2).*((-1).*cos(q3).*sin(2.*q6).*sin(q7).^2+sin(q3).*(cos(2.*q4).* ...
            (cos(q6).^2.*cos(2.*q7)+sin(q6).^2)+(-1).*cos(q6).*sin(2.*q4).* ...
            sin(2.*q7)))]';
        z9=[cos(q1).*(cos(2.*q7).*(cos(q2).*cos(2.*q4)+(-1).*sin(q2).*sin(q3) ...
            .*sin(2.*q4))+(-1).*(cos(q6).*(cos(2.*q4).*sin(q2).*sin(q3)+cos( ...
            q2).*sin(2.*q4))+cos(q3).*sin(q2).*sin(q6)).*sin(2.*q7))+(-1).* ...
            sin(q1).*(cos(q3).*cos(2.*q7).*sin(2.*q4)+(cos(q3).*cos(2.*q4).* ...
            cos(q6)+(-1).*sin(q3).*sin(q6)).*sin(2.*q7)),cos(2.*q7).*(cos(q1) ...
            .*cos(q3)+(-1).*sin(q1).*sin(q2).*sin(q3)).*sin(2.*q4)+(cos(2.*q4) ...
            .*cos(q6).*(cos(q1).*cos(q3)+(-1).*sin(q1).*sin(q2).*sin(q3))+(-1) ...
            .*(cos(q3).*sin(q1).*sin(q2)+cos(q1).*sin(q3)).*sin(q6)).*sin(2.* ...
            q7)+cos(q2).*sin(q1).*(cos(2.*q4).*cos(2.*q7)+(-1).*cos(q6).*sin( ...
            2.*q4).*sin(2.*q7)),cos(2.*q7).*(cos(2.*q4).*sin(q2)+cos(q2).*sin( ...
            q3).*sin(2.*q4))+((-1).*cos(q6).*sin(q2).*sin(2.*q4)+cos(q2).*( ...
            cos(2.*q4).*cos(q6).*sin(q3)+cos(q3).*sin(q6))).*sin(2.*q7)]';
        q10=atan2(dot(cross(x9,x10),z9),dot(x9,x10));
        q=[q1;q2;q3;q4;q6;q7;q10];
        exitflag=1;
        return
    end

    k=k+1;

    if k>k_max
        k=k-1;
        break
    end

    %% Random disturbance measure
    if k>overrun_threshold
        temp=overlimit_flag(:,k-1);
        if overrun_threshold>=2
            for i=2:overrun_threshold
                temp=temp & overlimit_flag(:,k-i);
            end
        end
        deadlock=any(temp);
        if deadlock
%             warning(k)
            q=qlim(:,1)+(qlim(:,2)-qlim(:,1)).*rand(7,1);
            q1=q(1); q2=q(2); q3=q(3);
            q4=q(4); q6=q(5); q7=q(6);
            e(:,1)=[cos(q1);sin(q1);0];
            y3=[cos(q1).*cos(q2),cos(q2).*sin(q1),sin(q2)]';
            z5=[cos(q1).*cos(q2).*cos(2.*q4)+(-1).*(cos(q3).*sin(q1)+cos(q1).* ...
                sin(q2).*sin(q3)).*sin(2.*q4),cos(q2).*cos(2.*q4).*sin(q1)+(cos( ...
                q1).*cos(q3)+(-1).*sin(q1).*sin(q2).*sin(q3)).*sin(2.*q4),cos(2.* ...
                q4).*sin(q2)+cos(q2).*sin(q3).*sin(2.*q4)]';
            z8=[cos(q1).*(cos(2.*q7).*(cos(q2).*cos(2.*q4)+(-1).*sin(q2).*sin(q3) ...
                .*sin(2.*q4))+(-1).*(cos(q6).*(cos(2.*q4).*sin(q2).*sin(q3)+cos( ...
                q2).*sin(2.*q4))+cos(q3).*sin(q2).*sin(q6)).*sin(2.*q7))+(-1).* ...
                sin(q1).*(cos(q3).*cos(2.*q7).*sin(2.*q4)+(cos(q3).*cos(2.*q4).* ...
                cos(q6)+(-1).*sin(q3).*sin(q6)).*sin(2.*q7)),cos(2.*q7).*(cos(q1) ...
                .*cos(q3)+(-1).*sin(q1).*sin(q2).*sin(q3)).*sin(2.*q4)+(cos(2.*q4) ...
                .*cos(q6).*(cos(q1).*cos(q3)+(-1).*sin(q1).*sin(q2).*sin(q3))+(-1) ...
                .*(cos(q3).*sin(q1).*sin(q2)+cos(q1).*sin(q3)).*sin(q6)).*sin(2.* ...
                q7)+cos(q2).*sin(q1).*(cos(2.*q4).*cos(2.*q7)+(-1).*cos(q6).*sin( ...
                2.*q4).*sin(2.*q7)),cos(2.*q7).*(cos(2.*q4).*sin(q2)+cos(q2).*sin( ...
                q3).*sin(2.*q4))+((-1).*cos(q6).*sin(q2).*sin(2.*q4)+cos(q2).*( ...
                cos(2.*q4).*cos(q6).*sin(q3)+cos(q3).*sin(q6))).*sin(2.*q7)]';
            e(:,1)=y3;
            e(:,2)=z5;
            e(:,3)=z8;
            N(:,1)=e(:,1)*l(1);
            for i=2:3
                N(:,i)=N(:,i-1)+e(:,i)*l(i);
            end
        end
    end

    %% Forward reaching phase
    N1(:,3)=pt; e(:,3)=et;
    N1(:,2)=N1(:,3)-l(3)*e(:,3);
    e(:,2)=N1(:,2)-N(:,1);
    e(:,2)=e(:,2)/norm(e(:,2));
    qs6=acos(dot(e(:,2),e(:,3)));
    if qs6>qslim(6,2)
        overlimit_flag(6,k)=1;
        qs6=qslim(6,2);
        vn3=cross(e(:,3),e(:,2));
        e(:,2)=rot(vn3,qs6,e(:,3));
    end
    N1(:,1)=N1(:,2)-l(2)*e(:,2);

    %% Backward reaching phase
    e(:,1)=N1(:,1);
    e(:,1)=e(:,1)/norm(e(:,1));
    N2(:,1)=l(1)*e(:,1);
    e(:,2)=N1(:,2)-N2(:,1);
    e(:,2)=e(:,2)/norm(e(:,2));
    qs4=acos(dot(e(:,1),e(:,2)));
    if qs4>qslim(4,2)
        overlimit_flag(4,k)=1;
        qs4=qslim(4,2);
        vn2=cross(e(:,1),e(:,2));
        e(:,2)=rot(vn2,qs4,e(:,1));
    end
    N2(:,2)=N2(:,1)+l(2)*e(:,2);
    e(:,3)=N1(:,3)-N2(:,2);
    e(:,3)=e(:,3)/norm(e(:,3));
    qs6=acos(dot(e(:,2),e(:,3)));
    if qs6>qslim(6,2)
        overlimit_flag(6,k)=1;
        qs6=qslim(6,2);
        vn3=cross(e(:,2),e(:,3));
        e(:,3)=rot(vn3,qs6,e(:,2));
    end
    N2(:,3)=N2(:,2)+l(3)*e(:,3);

    %% State update phase
    q1=atan2(e(2,1),e(1,1));
    q2=acos(sqrt(e(1,1)^2+e(2,1)^2));
    x2=[(-1).*cos(q1).*sin(q2),(-1).*sin(q1).*sin(q2),cos(q2)]';
    z2=[cos(q1).*cos(q2),cos(q2).*sin(q1),sin(q2)]';
    z3=cross(e(:,1),e(:,2));
    q3=atan2(dot(cross(x2,z3),z2),dot(x2,z3));
    q4=qs4/2;
    x5=[(-1).*cos(2.*q4).*(cos(q3).*sin(q1)+cos(q1).*sin(q2).*sin(q3))+( ...
        -1).*cos(q1).*cos(q2).*sin(2.*q4),cos(q1).*cos(q3).*cos(2.*q4)+( ...
        -1).*sin(q1).*(cos(2.*q4).*sin(q2).*sin(q3)+cos(q2).*sin(2.*q4)), ...
        cos(q2).*cos(2.*q4).*sin(q3)+(-1).*sin(q2).*sin(2.*q4)]';
    y5=[(-1).*cos(q1).*cos(q3).*sin(q2)+sin(q1).*sin(q3),(-1).*cos(q3).* ...
        sin(q1).*sin(q2)+(-1).*cos(q1).*sin(q3),cos(q2).*cos(q3)]';
    q6=atan2(dot(y5,e(:,3)),dot(x5,e(:,3)));
    q7=qs6/2;
    l(1)=d3+a4/(2*cos(q4));
    l(2)=a4/(2*cos(q4))+d6+a7/(2*cos(q7));
    l(3)=a7/(2*cos(q7))+d10;
    y3=[cos(q1).*cos(q2),cos(q2).*sin(q1),sin(q2)]';
    z5=[cos(q1).*cos(q2).*cos(2.*q4)+(-1).*(cos(q3).*sin(q1)+cos(q1).* ...
        sin(q2).*sin(q3)).*sin(2.*q4),cos(q2).*cos(2.*q4).*sin(q1)+(cos( ...
        q1).*cos(q3)+(-1).*sin(q1).*sin(q2).*sin(q3)).*sin(2.*q4),cos(2.* ...
        q4).*sin(q2)+cos(q2).*sin(q3).*sin(2.*q4)]';
    z8=[cos(q1).*(cos(2.*q7).*(cos(q2).*cos(2.*q4)+(-1).*sin(q2).*sin(q3) ...
        .*sin(2.*q4))+(-1).*(cos(q6).*(cos(2.*q4).*sin(q2).*sin(q3)+cos( ...
        q2).*sin(2.*q4))+cos(q3).*sin(q2).*sin(q6)).*sin(2.*q7))+(-1).* ...
        sin(q1).*(cos(q3).*cos(2.*q7).*sin(2.*q4)+(cos(q3).*cos(2.*q4).* ...
        cos(q6)+(-1).*sin(q3).*sin(q6)).*sin(2.*q7)),cos(2.*q7).*(cos(q1) ...
        .*cos(q3)+(-1).*sin(q1).*sin(q2).*sin(q3)).*sin(2.*q4)+(cos(2.*q4) ...
        .*cos(q6).*(cos(q1).*cos(q3)+(-1).*sin(q1).*sin(q2).*sin(q3))+(-1) ...
        .*(cos(q3).*sin(q1).*sin(q2)+cos(q1).*sin(q3)).*sin(q6)).*sin(2.* ...
        q7)+cos(q2).*sin(q1).*(cos(2.*q4).*cos(2.*q7)+(-1).*cos(q6).*sin( ...
        2.*q4).*sin(2.*q7)),cos(2.*q7).*(cos(2.*q4).*sin(q2)+cos(q2).*sin( ...
        q3).*sin(2.*q4))+((-1).*cos(q6).*sin(q2).*sin(2.*q4)+cos(q2).*( ...
        cos(2.*q4).*cos(q6).*sin(q3)+cos(q3).*sin(q6))).*sin(2.*q7)]';
    e(:,1)=y3;
    e(:,2)=z5;
    e(:,3)=z8;
    N(:,1)=e(:,1)*l(1);
    for i=2:3
        N(:,i)=N(:,i-1)+e(:,i)*l(i);
    end
end

%% If fail then return the initial guess
q=q0;